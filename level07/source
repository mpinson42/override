#include <stdio.h>
#include <string.h>

void            clear_stdin(void)
{
    char        x;

    x = 0;
    while (42)
    {
        x = getchar();
        if  ((x == '\n') || (x == EOF))
            break ;
    }
}

unsigned int    get_unum(void)
{
    unsigned int    n;

    n = 0;
    fflush(stdout);
    scanf("%u", &n);
    clear_stdin();
    return (n);
}

int             read_number(unsigned int *numbers)
{
    unsigned int        i;

    printf(" Index: ");
    i = get_unum();
    printf(" Number at data[%u] is %u\n", i, numbers[i]);
    return (0);
}

int             store_number(unsigned int *numbers)
{
    unsigned int       nb;
    unsigned int       index;

    printf(" Number: ");
    nb = get_unum();
    printf(" Index: ");
    index = get_unum();
    if ((index % 3 == 0) || ((nb >> 24) == 0xb7))
    {
        puts(" *** ERROR! ***");
        puts("    This index is reserved for wil!");
        puts(" *** ERROR! ***");
        return (1);
    }
    numbers[index] = nb;
    return (0);
}

static void    cleartab(char **tab)
{
    while (*tab)
    {
        memset(*tab, 0, strlen(*tab));
        tab++;
    }
}

/*
** {0} = the equivalence to rep strings in asm (memset)
*/

int             main(int ac, char **av, char **env)
{
    int             tmp;
    char            command[20] = {0};
    unsigned int    numbers[100] = {0};

    cleartab(av);
    cleartab(env);
    puts(
        "----------------------------------------------------\n"
        "  Welcome to wil's crappy number storage service !  \n"
        "----------------------------------------------------\n"
        "  Commands:                                         \n"
        "    store - store a number into the data storage    \n"
        "    read  - read a number from the data storage     \n"
        "    quit  - exit the program                        \n"
        "----------------------------------------------------\n"
        "   wil has reserved some storage :>                 \n"
        "\n");
    while (1)
    {
        printf("Input command: ");
        tmp = 1;
        fgets(command, 20, stdin);
        command[strlen(command) - 1] = '\0';
        if (strncmp(command, "store", 5) == 0)
            tmp = store_number(numbers);
        else if (strncmp(command, "read", 4) == 0)
            tmp = read_number(numbers);
        else if (strncmp(command, "quit", 4) == 0)
            break ;
        if (tmp)
            printf(" Failed to do %s command\n", command);
        else
            printf(" Completed %s command successfully\n", command);
        memset(command, 0, 20);
    }
    return (0);
}